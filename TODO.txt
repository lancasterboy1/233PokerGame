GameHandler

clientSendData(Client user, String cmd)
IF THEYRE JOINING A GAME->
  IF THERE IS A GAME THAT ISNT FULL->
    CALL THE GAME'S ADD METHOD ON THEM
  ELSE->
    MAKE A NEW GAME, PASS THEM AS ARGUMENT, ADD THE GAME TO THE GAME LIST
ELIF THEYRE STARTING THE GAME
  IF THEYRE IN A GAME->
    THEIR GAME.startGame()
ELIF THEYRE LEAVING THE GAME
  IF THEYRE IN A GAME->
    CALL THE GAME'S REMOVE METHOD ON THEM
ELIF player.waitingForInput->
  CALL THEIR GAME.userSentData(cmd)


Game

public Game(Client creator)
INITIALIZE THE LIST OF PLAYERS (VECTOR)
INITIALIZE THE DECK (VECTOR)
ADD CREATOR TO THE LIST OF PLAYERS
SET THE CREATORS CURRENT GAME TO THIS
SET THE GAME STATE TO WAITING

public addPlayer(Client user)
IF THE GAME STATE IS WAITING->
  ADD THEM TO THE LIST OF PLAYERS
  SET THEIR CURRENT GAME TO THIS
  IF THE PLAYER LIST HAS AS MANY PLAYERS AS MAX PLAYERS->
    CALL startGame()

public startGame()
SET EVERY PLAYER'S CHIPS TO 1000
startRound()

public removePlayer(Client user)
NO IDEA GOOD LUCK, ACCOUNT FOR EVERY SINGLE GAME STATE PLEASE INCLUDING WAITING FOR PLAYER INPUT
CLEAR THE PLAYER'S HAND ALSO

public startRound()
SET THE GAME PHASE TO 0
SET ACTIVEPLAYERS TO A COPY OF PLAYERS
CLEAR THE DECK
ADD 52 CARD OBJECTS TO THE DECK
CLEAR THE PLAYER'S HAND (FOR SAFETY)
GIVE 5 CARDS FROM THE DECK TO EACH PLAYER'S HAND
CHECK PHASE_ARRAY[GAME PHASE]
IF DISCARD->
  CALL discardPhase()
IF BET->
  CALL betPhase()

private nextPhase()
ADD 1 TO THE GAME PHASE
CHECK PHASE_ARRAY[GAME PHASE]
IF DISCARD->
  CALL discardPhase()
IF BET->
  CALL betPhase()
IF FINISH->
  CALL endRound()

private discardPhase()
TELL ALL PLAYERS THEY CAN DISCARD ANY AMOUNT OF CARDS
QUERY ALL PLAYERS, STORE THEIR RESPONSES IN AN ARRAY
DISCARD THEIR CARDS ACCORDINGLY, PUTTING THEM AT THE BOTTOM OF THE DECK
SHUFFLE THE REMAINING DECK AGAIN (?)
DEAL NEW CARDS TO THE PLAYERS THAT HAVE DISCARDED
nextPhase()

private betPhase()
SET NUMCALLS EQUAL TO 0
FOR EVERY PLAYER IN -ACTIVE- PLAYERS->
  QUERY THAT PLAYER IF THEY WANT TO CALL (MATCH THE BET), FOLD (DROP OUT OF THE ROUND), RAISE (INCREASE THE BET), OR ALL IN (SET ALL IN TO TRUE AND FORCE OTHER PLAYERS TO FOLD OR ALL IN).
  IF THEY FOLD, REMOVE THEM FROM THE LIST OF -ACTIVE- PLAYERS. DO NOT ALTER NUMCALLS
  IF THEY CALL, MAKE SURE THEY CAN AFFORD IT, IF NO REQUERY, IF YES TAKE MONEY FROM THEIR CHIPS AND PUT IT IN THE POT ACCORDINGLY. INCREASE NUMCALLS BY 1.
  IF THEY RAISE, MAKE SURE THEY CAN AFFORD THE NUMBER THEY ENTERED, MAKE SURE IT IS GREATER THAN 0. IF NO TO ANY OF THESE REQUERY, IF YES INCREASE THE CURRENT BET VARIABLE AND PUT MONEY FROM THEIR CHIPS INTO THE POT ACCORDINGLY. ALSO, SET NUMCALLS TO 0.
ONCE THIS FOR LOOP HAS BEEN PERFORMED MAX_BET_CYCLE TIMES OR NUMCALLS = ACTIVE PLAYERS . LENGTH, nextPhase()

private winningHand()
FIGURE OUT, USING THE -ACTIVE- PLAYERS LIST, WHOS HAND WON
SEND EVERY PLAYER A MESSAGE DETAILING WHO WON THE ROUND AND WHY
RETURN THE CLIENT REFERENCE OF THE WINNER

private endRound()
CALL winningHand(), ADD THE POT TO THAT CLIENT'S CHIPS
CLEAR EVERY PLAYER'S HAND
IF ALL PLAYERS EXCEPT ONE BANKRUPT->
  endGame(THAT PLAYER)
ELSE->
  QUERY EVERYONE IF THEY WANT TO KEEP PLAYING
  IF ENOUGH PEOPLE SAY YES->
    REMOVE EVERYONE WHO SAID NO
    startRound()
  ELSE->
    IF THERES STILL A PLAYER LEFT->
      endGame(THAT PLAYER)
    ELSE->
      endGame(null)

private endGame(Client player)
TELL EVERYONE THAT PLAYER WON THE GAME
DESTROY THIS

private queryPlayer(Client player)
SET THAT PLAYER'S WAITING FOR INPUT EQUAL TO TRUE
BLOCK UNTIL PLAYER RESPONDS (userSentData IS CALLED), SET THEIR WAITING FOR INPUT EQUAL TO FALSE AND RETURN THEIR RESPONSE

private queryMultiplePlayers(Vector<ClientHandler> players)
SET ALL PLAYERS IN LIST WAITING FOR INPUT EQUAL TO TRUE
BLOCK UNTIL EVERY PLAYER RESPONDS, SETTING EACH ONE'S WAITING FOR INPUT EQUAL TO FALSE WHEN THEY DO
RETURN A VECTOR OF RESPONSES ONCE ALL OF THEM COME IN

private tellAllPlayers(String msg)
FOR ALL PLAYERS IN THE PLAYER LIST, SEND THEM MSG

private userSentData(String cmd)
THIS IS TRIGGERED WHENEVER A USER SENDS A COMMAND AND THEIR WAITINGFORINPUT WAS TRUE, INTERFACE WITH queryPlayer AND queryAllPlayers SOMEHOW